// MIT License
// 
// Copyright (c) 2024 Peter Dennis Bartok 
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;

namespace PQnet.Digest {
	public partial class KeccakBaseX4 {
		/// <summary>
		/// Apply the Keccak permutation on all states in parallel.
		/// </summary>
		internal void PermuteAll_24rounds() {
			Vector256<ulong> Aba, Abe, Abi, Abo, Abu;
			Vector256<ulong> Aga, Age, Agi, Ago, Agu;
			Vector256<ulong> Aka, Ake, Aki, Ako, Aku;
			Vector256<ulong> Ama, Ame, Ami, Amo, Amu;
			Vector256<ulong> Asa, Ase, Asi, Aso, Asu;
			Vector256<ulong> Bba, Bbe, Bbi, Bbo, Bbu;
			Vector256<ulong> Bga, Bge, Bgi, Bgo, Bgu;
			Vector256<ulong> Bka, Bke, Bki, Bko, Bku;
			Vector256<ulong> Bma, Bme, Bmi, Bmo, Bmu;
			Vector256<ulong> Bsa, Bse, Bsi, Bso, Bsu;
			Vector256<ulong> Ca, Ce, Ci, Co, Cu;
			Vector256<ulong> Ca1, Ce1, Ci1, Co1, Cu1;
			Vector256<ulong> Da, De, Di, Do, Du;
			Vector256<ulong> Eba, Ebe, Ebi, Ebo, Ebu;
			Vector256<ulong> Ega, Ege, Egi, Ego, Egu;
			Vector256<ulong> Eka, Eke, Eki, Eko, Eku;
			Vector256<ulong> Ema, Eme, Emi, Emo, Emu;
			Vector256<ulong> Esa, Ese, Esi, Eso, Esu;

#if DEBUG
			ulong[] dumped_state;

			DumpState(0, out dumped_state);
			states0.Add(dumped_state);
			DumpState(1, out dumped_state);
			states1.Add(dumped_state);

			DumpState(2, out dumped_state);
			states2.Add(dumped_state);

			DumpState(3, out dumped_state);
			states3.Add(dumped_state);
#endif
			Aba = state[0];
			Abe = state[1];
			Abi = state[2];
			Abo = state[3];
			Abu = state[4];
			Aga = state[5];
			Age = state[6];
			Agi = state[7];
			Ago = state[8];
			Agu = state[9];
			Aka = state[10];
			Ake = state[11];
			Aki = state[12];
			Ako = state[13];
			Aku = state[14];
			Ama = state[15];
			Ame = state[16];
			Ami = state[17];
			Amo = state[18];
			Amu = state[19];
			Asa = state[20];
			Ase = state[21];
			Asi = state[22];
			Aso = state[23];
			Asu = state[24];

			Ca = Avx2.Xor(Avx2.Xor(Avx2.Xor(Avx2.Xor(Aba, Aga), Aka), Ama), Asa);
			Ce = Avx2.Xor(Avx2.Xor(Avx2.Xor(Avx2.Xor(Abe, Age), Ake), Ame), Ase);
			Ci = Avx2.Xor(Avx2.Xor(Avx2.Xor(Avx2.Xor(Abi, Agi), Aki), Ami), Asi);
			Co = Avx2.Xor(Avx2.Xor(Avx2.Xor(Avx2.Xor(Abo, Ago), Ako), Amo), Aso);
			Cu = Avx2.Xor(Avx2.Xor(Avx2.Xor(Avx2.Xor(Abu, Agu), Aku), Amu), Asu);

			// INSERT HERE : Round24 generated code start

			// GenerateRounds24 generated code start
			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[0]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[1]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[2]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[3]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[4]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[5]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[6]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[7]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[8]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[9]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[10]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[11]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[12]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[13]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[14]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[15]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[16]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[17]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[18]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[19]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[20]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[21]);
			Ca = Aba;
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Abe;
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Abi;
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Abo;
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Abu;


			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Aga);
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Age);
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Agi);
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ago);
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Agu);


			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Aka);
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Ake);
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Aki);
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Ako);
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Aku);


			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ama);
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Ame);
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Ami);
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Amo);
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Amu);


			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Asa);
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ase);
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Asi);
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Aso);
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Asu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Aba = Avx2.Xor(Aba, Da);
			Bba = Aba;
			Age = Avx2.Xor(Age, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Age, 44), Avx2.ShiftRightLogical(Age, 64 - 44));
			Aki = Avx2.Xor(Aki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Aki, 43), Avx2.ShiftRightLogical(Aki, 64 - 43));
			Eba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Eba = Avx2.Xor(Eba, KeccakF1600RoundConstants[22]);
			Ca = Eba;
			Amo = Avx2.Xor(Amo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Amo, 21), Avx2.ShiftRightLogical(Amo, 64 - 21));
			Ebe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Ce = Ebe;
			Asu = Avx2.Xor(Asu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Asu, 14), Avx2.ShiftRightLogical(Asu, 64 - 14));
			Ebi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Ci = Ebi;
			Ebo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Co = Ebo;
			Ebu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));
			Cu = Ebu;


			Abo = Avx2.Xor(Abo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Abo, 28), Avx2.ShiftRightLogical(Abo, 64 - 28));
			Agu = Avx2.Xor(Agu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Agu, 20), Avx2.ShiftRightLogical(Agu, 64 - 20));
			Aka = Avx2.Xor(Aka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Aka, 3), Avx2.ShiftRightLogical(Aka, 64 - 3));
			Ega = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Ca = Avx2.Xor(Ca, Ega);
			Ame = Avx2.Xor(Ame, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Ame, 45), Avx2.ShiftRightLogical(Ame, 64 - 45));
			Ege = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Ce = Avx2.Xor(Ce, Ege);
			Asi = Avx2.Xor(Asi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Asi, 61), Avx2.ShiftRightLogical(Asi, 64 - 61));
			Egi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ci = Avx2.Xor(Ci, Egi);
			Ego = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Co = Avx2.Xor(Co, Ego);
			Egu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));
			Cu = Avx2.Xor(Cu, Egu);


			Abe = Avx2.Xor(Abe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Abe, 1), Avx2.ShiftRightLogical(Abe, 64 - 1));
			Agi = Avx2.Xor(Agi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Agi, 6), Avx2.ShiftRightLogical(Agi, 64 - 6));
			Ako = Avx2.Xor(Ako, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Ako, 25), Avx2.ShiftRightLogical(Ako, 64 - 25));
			Eka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Ca = Avx2.Xor(Ca, Eka);
			Amu = Avx2.Xor(Amu, Du);
			Bko = Avx2.Shuffle(Amu.AsByte(), rho8).AsUInt64();
			Eke = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Ce = Avx2.Xor(Ce, Eke);
			Asa = Avx2.Xor(Asa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Asa, 18), Avx2.ShiftRightLogical(Asa, 64 - 18));
			Eki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ci = Avx2.Xor(Ci, Eki);
			Eko = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Co = Avx2.Xor(Co, Eko);
			Eku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));
			Cu = Avx2.Xor(Cu, Eku);


			Abu = Avx2.Xor(Abu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Abu, 27), Avx2.ShiftRightLogical(Abu, 64 - 27));
			Aga = Avx2.Xor(Aga, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Aga, 36), Avx2.ShiftRightLogical(Aga, 64 - 36));
			Ake = Avx2.Xor(Ake, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Ake, 10), Avx2.ShiftRightLogical(Ake, 64 - 10));
			Ema = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Ca = Avx2.Xor(Ca, Ema);
			Ami = Avx2.Xor(Ami, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Ami, 15), Avx2.ShiftRightLogical(Ami, 64 - 15));
			Eme = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Ce = Avx2.Xor(Ce, Eme);
			Aso = Avx2.Xor(Aso, Do);
			Bmu = Avx2.Shuffle(Aso.AsByte(), rho56).AsUInt64();
			Emi = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Ci = Avx2.Xor(Ci, Emi);
			Emo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Co = Avx2.Xor(Co, Emo);
			Emu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));
			Cu = Avx2.Xor(Cu, Emu);


			Abi = Avx2.Xor(Abi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Abi, 62), Avx2.ShiftRightLogical(Abi, 64 - 62));
			Ago = Avx2.Xor(Ago, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ago, 55), Avx2.ShiftRightLogical(Ago, 64 - 55));
			Aku = Avx2.Xor(Aku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Aku, 39), Avx2.ShiftRightLogical(Aku, 64 - 39));
			Esa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ca = Avx2.Xor(Ca, Esa);
			Ama = Avx2.Xor(Ama, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ama, 41), Avx2.ShiftRightLogical(Ama, 64 - 41));
			Ese = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ce = Avx2.Xor(Ce, Ese);
			Ase = Avx2.Xor(Ase, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ase, 2), Avx2.ShiftRightLogical(Ase, 64 - 2));
			Esi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Ci = Avx2.Xor(Ci, Esi);
			Eso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Co = Avx2.Xor(Co, Eso);
			Esu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));
			Cu = Avx2.Xor(Cu, Esu);

			Ce1 = Avx2.Or(Avx2.ShiftLeftLogical(Ce, 1), Avx2.ShiftRightLogical(Ce, 64 - 1));
			Da = Avx2.Xor(Cu, Ce1);
			Ci1 = Avx2.Or(Avx2.ShiftLeftLogical(Ci, 1), Avx2.ShiftRightLogical(Ci, 64 - 1));
			De = Avx2.Xor(Ca, Ci1);
			Co1 = Avx2.Or(Avx2.ShiftLeftLogical(Co, 1), Avx2.ShiftRightLogical(Co, 64 - 1));
			Di = Avx2.Xor(Ce, Co1);
			Cu1 = Avx2.Or(Avx2.ShiftLeftLogical(Cu, 1), Avx2.ShiftRightLogical(Cu, 64 - 1));
			Do = Avx2.Xor(Ci, Cu1);
			Ca1 = Avx2.Or(Avx2.ShiftLeftLogical(Ca, 1), Avx2.ShiftRightLogical(Ca, 64 - 1));
			Du = Avx2.Xor(Co, Ca1);

			Eba = Avx2.Xor(Eba, Da);
			Bba = Eba;
			Ege = Avx2.Xor(Ege, De);
			Bbe = Avx2.Or(Avx2.ShiftLeftLogical(Ege, 44), Avx2.ShiftRightLogical(Ege, 64 - 44));
			Eki = Avx2.Xor(Eki, Di);
			Bbi = Avx2.Or(Avx2.ShiftLeftLogical(Eki, 43), Avx2.ShiftRightLogical(Eki, 64 - 43));
			Aba = Avx2.Xor(Bba, Avx2.AndNot(Bbe, Bbi));
			Aba = Avx2.Xor(Aba, KeccakF1600RoundConstants[23]);
			Emo = Avx2.Xor(Emo, Do);
			Bbo = Avx2.Or(Avx2.ShiftLeftLogical(Emo, 21), Avx2.ShiftRightLogical(Emo, 64 - 21));
			Abe = Avx2.Xor(Bbe, Avx2.AndNot(Bbi, Bbo));
			Esu = Avx2.Xor(Esu, Du);
			Bbu = Avx2.Or(Avx2.ShiftLeftLogical(Esu, 14), Avx2.ShiftRightLogical(Esu, 64 - 14));
			Abi = Avx2.Xor(Bbi, Avx2.AndNot(Bbo, Bbu));
			Abo = Avx2.Xor(Bbo, Avx2.AndNot(Bbu, Bba));
			Abu = Avx2.Xor(Bbu, Avx2.AndNot(Bba, Bbe));

			Ebo = Avx2.Xor(Ebo, Do);
			Bga = Avx2.Or(Avx2.ShiftLeftLogical(Ebo, 28), Avx2.ShiftRightLogical(Ebo, 64 - 28));
			Egu = Avx2.Xor(Egu, Du);
			Bge = Avx2.Or(Avx2.ShiftLeftLogical(Egu, 20), Avx2.ShiftRightLogical(Egu, 64 - 20));
			Eka = Avx2.Xor(Eka, Da);
			Bgi = Avx2.Or(Avx2.ShiftLeftLogical(Eka, 3), Avx2.ShiftRightLogical(Eka, 64 - 3));
			Aga = Avx2.Xor(Bga, Avx2.AndNot(Bge, Bgi));
			Eme = Avx2.Xor(Eme, De);
			Bgo = Avx2.Or(Avx2.ShiftLeftLogical(Eme, 45), Avx2.ShiftRightLogical(Eme, 64 - 45));
			Age = Avx2.Xor(Bge, Avx2.AndNot(Bgi, Bgo));
			Esi = Avx2.Xor(Esi, Di);
			Bgu = Avx2.Or(Avx2.ShiftLeftLogical(Esi, 61), Avx2.ShiftRightLogical(Esi, 64 - 61));
			Agi = Avx2.Xor(Bgi, Avx2.AndNot(Bgo, Bgu));
			Ago = Avx2.Xor(Bgo, Avx2.AndNot(Bgu, Bga));
			Agu = Avx2.Xor(Bgu, Avx2.AndNot(Bga, Bge));

			Ebe = Avx2.Xor(Ebe, De);
			Bka = Avx2.Or(Avx2.ShiftLeftLogical(Ebe, 1), Avx2.ShiftRightLogical(Ebe, 64 - 1));
			Egi = Avx2.Xor(Egi, Di);
			Bke = Avx2.Or(Avx2.ShiftLeftLogical(Egi, 6), Avx2.ShiftRightLogical(Egi, 64 - 6));
			Eko = Avx2.Xor(Eko, Do);
			Bki = Avx2.Or(Avx2.ShiftLeftLogical(Eko, 25), Avx2.ShiftRightLogical(Eko, 64 - 25));
			Aka = Avx2.Xor(Bka, Avx2.AndNot(Bke, Bki));
			Emu = Avx2.Xor(Emu, Du);
			Bko = Avx2.Shuffle(Emu.AsByte(), rho8).AsUInt64();
			Ake = Avx2.Xor(Bke, Avx2.AndNot(Bki, Bko));
			Esa = Avx2.Xor(Esa, Da);
			Bku = Avx2.Or(Avx2.ShiftLeftLogical(Esa, 18), Avx2.ShiftRightLogical(Esa, 64 - 18));
			Aki = Avx2.Xor(Bki, Avx2.AndNot(Bko, Bku));
			Ako = Avx2.Xor(Bko, Avx2.AndNot(Bku, Bka));
			Aku = Avx2.Xor(Bku, Avx2.AndNot(Bka, Bke));

			Ebu = Avx2.Xor(Ebu, Du);
			Bma = Avx2.Or(Avx2.ShiftLeftLogical(Ebu, 27), Avx2.ShiftRightLogical(Ebu, 64 - 27));
			Ega = Avx2.Xor(Ega, Da);
			Bme = Avx2.Or(Avx2.ShiftLeftLogical(Ega, 36), Avx2.ShiftRightLogical(Ega, 64 - 36));
			Eke = Avx2.Xor(Eke, De);
			Bmi = Avx2.Or(Avx2.ShiftLeftLogical(Eke, 10), Avx2.ShiftRightLogical(Eke, 64 - 10));
			Ama = Avx2.Xor(Bma, Avx2.AndNot(Bme, Bmi));
			Emi = Avx2.Xor(Emi, Di);
			Bmo = Avx2.Or(Avx2.ShiftLeftLogical(Emi, 15), Avx2.ShiftRightLogical(Emi, 64 - 15));
			Ame = Avx2.Xor(Bme, Avx2.AndNot(Bmi, Bmo));
			Eso = Avx2.Xor(Eso, Do);
			Bmu = Avx2.Shuffle(Eso.AsByte(), rho56).AsUInt64();
			Ami = Avx2.Xor(Bmi, Avx2.AndNot(Bmo, Bmu));
			Amo = Avx2.Xor(Bmo, Avx2.AndNot(Bmu, Bma));
			Amu = Avx2.Xor(Bmu, Avx2.AndNot(Bma, Bme));

			Ebi = Avx2.Xor(Ebi, Di);
			Bsa = Avx2.Or(Avx2.ShiftLeftLogical(Ebi, 62), Avx2.ShiftRightLogical(Ebi, 64 - 62));
			Ego = Avx2.Xor(Ego, Do);
			Bse = Avx2.Or(Avx2.ShiftLeftLogical(Ego, 55), Avx2.ShiftRightLogical(Ego, 64 - 55));
			Eku = Avx2.Xor(Eku, Du);
			Bsi = Avx2.Or(Avx2.ShiftLeftLogical(Eku, 39), Avx2.ShiftRightLogical(Eku, 64 - 39));
			Asa = Avx2.Xor(Bsa, Avx2.AndNot(Bse, Bsi));
			Ema = Avx2.Xor(Ema, Da);
			Bso = Avx2.Or(Avx2.ShiftLeftLogical(Ema, 41), Avx2.ShiftRightLogical(Ema, 64 - 41));
			Ase = Avx2.Xor(Bse, Avx2.AndNot(Bsi, Bso));
			Ese = Avx2.Xor(Ese, De);
			Bsu = Avx2.Or(Avx2.ShiftLeftLogical(Ese, 2), Avx2.ShiftRightLogical(Ese, 64 - 2));
			Asi = Avx2.Xor(Bsi, Avx2.AndNot(Bso, Bsu));
			Aso = Avx2.Xor(Bso, Avx2.AndNot(Bsu, Bsa));
			Asu = Avx2.Xor(Bsu, Avx2.AndNot(Bsa, Bse));

			// GenerateRounds24 generated code end


			// END INSERT EHERE - Round24 generated code end

			state[0] = Aba;
			state[1] = Abe;
			state[2] = Abi;
			state[3] = Abo;
			state[4] = Abu;
			state[5] = Aga;
			state[6] = Age;
			state[7] = Agi;
			state[8] = Ago;
			state[9] = Agu;
			state[10] = Aka;
			state[11] = Ake;
			state[12] = Aki;
			state[13] = Ako;
			state[14] = Aku;
			state[15] = Ama;
			state[16] = Ame;
			state[17] = Ami;
			state[18] = Amo;
			state[19] = Amu;
			state[20] = Asa;
			state[21] = Ase;
			state[22] = Asi;
			state[23] = Aso;
			state[24] = Asu;

		}
	}
}
